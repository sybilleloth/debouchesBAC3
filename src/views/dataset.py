#code avant all√®gement 
import streamlit as st
import pandas as pd
import numpy as np

import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns

import sys #pour aller chercher les classes o√π il faut
sys.path.append('./src/views')
from population import population


def load_view():
        # chargement dataset nettoy√©
    csv_file = "./data/esr_intersup_nettoye 2024_09.csv"
    try:
        df = pd.read_csv(csv_file)
        print("Fichier {csv_file} charg√© avec succ√®s pour la page dataset.")
        df = df
    except FileNotFoundError:
        print(f"Le fichier {csv_file} est introuvable.")
    except Exception as e:
        print(f"Une erreur est survenue lors du chargement du fichier pour page dataset: {e}")

        # chargement dataset nettoy√© avec coordonn√©es gps pour affichage de carte
    csv_file = "./data/esr_nettoye_avec_cities 2024_09.csv"
    df_cities = pd.read_csv(csv_file)
    print("Fichier avec coordonn√©es gps charg√© avec succ√®s pour page dataset.")
    df_cities = df_cities
    

#-------Partie 1 - cleaned dataset introduction
    # affichage et appel pour la vue de la page dataset et appel des fonctions
    st.title(':label: Pr√©sentation du jeu de donn√©es nettoy√©')
    
    st.markdown("""
    ### 1. Le tableau des donn√©es 
    """)
    st.write(f"**Taille du jeu de donn√©es (lignes, colonnes):** {df.shape}")
    with st.expander("visualiser le dataset (jeu de donn√©es)") :
        st.dataframe(df)
    
    st.markdown("""
    ### 2. Limites du dataset dans sa version actuelle 
    """)
    limites()

    st.markdown("""
                ### 3. Carte g√©ographique de r√©partition des lignes du jeu de donn√©es par acad√©mie en France\n Cette carte du monde pr√©sente la r√©partition g√©ographique des lignes du jeu de donn√©es. Il vous suffit de r√©gler le zoom pour visualiser les DROM-COM.
                """)
    display_map_plotly(df_cities) #carte interactive montant la r√©partion du nombre de lignes du dataset par acad√©mie


#-------Partie 2 - views as to master the dataset
    #t√©l√©chargement ici des emojis: https://unicode.org/emoji/charts/full-emoji-list.html
    st.header("üëÄ	Visualisations facilitant la prise de connaissance des donn√©es\n") 
    distribution_effectif(df)
    distribution_effectif_par_annee(df)
    st.subheader("Liens entre les variables du jeu de donn√©es\n")
    with st.expander("afficher les vues"):
        col1, col2 = st.columns(2)
        with col1:
            display_corr_var(df)
        with col2:
            data_heat(df)
    
    display_factor(df)
    
    st.markdown("""
    ### R√©partition sortants et poursuivants par type de dipl√¥me et par r√©gion 
    """)
    col1, col2 = st.columns(2)
    with col1 : 
        with st.expander( "voir le graphe par type de dipl√¥me" ):
            sortantspoursuivantstypediplome(df)
    with col2 : 
        with st.expander( "voir le graphe par r√©gion" ):
            sortantspoursuivantsregion(df)
    display_majors(df)
    display_spread_time(df)
    viz_rank_university(df)
    
def distribution_effectif(df):
    # V√©rifier si les colonnes n√©cessaires existent dans le DataFrame
    st.markdown("### Analyse et r√©partition des effectifs, population de l'√©tude ###")

    if {'Nombre de sortants', 'Nombre de poursuivants', 'Mois apr√®s la diplomation'}.issubset(df.columns):
        # R√©cup√©rer les valeurs uniques de la colonne 'Mois apr√®s la diplomation'
        
        with st.expander("Voir la r√©partition telle que l'enqu√™te a √©t√© men√©e") : 
            # Regrouper les donn√©es par 'Mois apr√®s la diplomation' pour calculer les effectifs cumul√©s
            df_grouped = df.groupby('Mois apr√®s la diplomation')[['Nombre de sortants', 'Nombre de poursuivants']].sum().reset_index()
            population = df_grouped["Nombre de sortants"].max()+ df_grouped["Nombre de poursuivants"].max()
            st.write(f"Population √©tudi√©e : {population} personnes")
            col11, col12 = st.columns(2)
            with col11 : 
                # Afficher les donn√©es group√©es
                st.write(df_grouped)
            with col12 : 
                # Palette de couleurs personnalis√©e
                colors = ['#abc837', '#77264b']  # Pomme, Aubergine
                # Cr√©ation du graphique
                fig, ax = plt.subplots(figsize=(10, 6))
                ax.plot(df_grouped['Mois apr√®s la diplomation'], df_grouped['Nombre de sortants'], marker='o', label='Nombre de sortants', color=colors[1])
                ax.plot(df_grouped['Mois apr√®s la diplomation'], df_grouped['Nombre de poursuivants'], marker='o', label='Nombre de poursuivants',color=colors[0])

                # Ajouter des titres et des l√©gendes
                ax.set_xlabel("Mois apr√®s la diplomation")
                ax.set_ylabel("Effectifs")
                ax.set_title("Distribution des effectifs par mois apr√®s la diplomation")
                ax.legend()

                # Afficher le graphique dans Streamlit
                st.pyplot(fig)
        
        
    else:
        st.error("Les colonnes 'Nombre de sortants', 'Nombre de poursuivants', et 'Mois apr√®s la diplomation' doivent √™tre pr√©sentes dans le DataFrame.")

def distribution_effectif_par_annee(df):
    st.markdown("### Evolution annuelle de la population √©tudi√©e ###")
    
    # Cr√©er une instance de la classe population
    pop = population(df)  # Ici, 'population' fait r√©f√©rence √† une classe ou un module
    
    # Appeler la m√©thode millesime pour obtenir les donn√©es par ann√©e
    df_millesime = pop.millesime()
    
    # Palette de couleurs personnalis√©e
    colors = ['#abc837', '#77264b']  # Pomme, Aubergine
    
    # V√©rifier si les colonnes n√©cessaires sont pr√©sentes dans le DataFrame df_millesime
    if {'Nombre de sortants', 'Nombre de poursuivants', 'Ann√©e(s) d\'obtention du dipl√¥me prise(s) en compte'}.issubset(df_millesime.columns):
        # Regrouper les donn√©es par ann√©e pour calculer les effectifs cumul√©s
        df_grouped = df_millesime.groupby('Ann√©e(s) d\'obtention du dipl√¥me prise(s) en compte')[['Nombre de sortants', 'Nombre de poursuivants']].sum().reset_index()
        
        # Calculer la population totale √©tudi√©e (somme de tous les sortants et poursuivants)
        population_totale = df_grouped["Nombre de sortants"].sum() + df_grouped["Nombre de poursuivants"].sum()
        st.write(f"Population totale √©tudi√©e : {population_totale}")
        with st.expander("Voir l'√©volution annuelle de la population √©tudi√©e") :
            col13, col14 = st.columns(2)
            with col13 : 
                st.write(f"Population totale √©tudi√©e : {population_totale}")
                # Afficher les donn√©es group√©es par ann√©e
                st.write(df_grouped)
            with col14 : 
                # Cr√©ation du graphique
                fig, ax = plt.subplots(figsize=(10, 6))
                ax.plot(df_grouped['Ann√©e(s) d\'obtention du dipl√¥me prise(s) en compte'], df_grouped['Nombre de sortants'], marker='o', label='Nombre de sortants', color=colors[1])
                ax.plot(df_grouped['Ann√©e(s) d\'obtention du dipl√¥me prise(s) en compte'], df_grouped['Nombre de poursuivants'], marker='o', label='Nombre de poursuivants', color=colors[0])

                # Ajouter des titres et des l√©gendes
                ax.set_xlabel("Ann√©e(s) d'obtention du dipl√¥me")
                ax.set_ylabel("Effectifs")
                ax.set_title("Distribution des effectifs par ann√©e d'obtention du dipl√¥me")
                ax.legend()

                # Afficher le graphique dans Streamlit
                st.pyplot(fig)

    else:
        st.error("Les colonnes 'Nombre de sortants', 'Nombre de poursuivants', et 'Ann√©e(s) d\'obtention du dipl√¥me prise(s) en compte' doivent √™tre pr√©sentes dans le DataFrame.")

def sortantspoursuivantstypediplome(df):
    st.markdown("### R√©partition des effectifs par type de dipl√¥me")
    # Cr√©er une instance de la classe population
    pop = population(df)
    #st.write(dir(pop)) pour checker les attributs et m√©thodes
    # Appeler la m√©thode etablissement
    df_type_diplome = pop.type_diplome()  # Notez les parenth√®ses car c'est une m√©thode
    #st.write(df_type_diplome) #pour check
    # Cr√©er un tableau de r√©partition par 'Type de dipl√¥me' avec les colonnes 'Nombre de sortants' et 'Nombre de poursuivants'
    df_grouped = df_type_diplome.groupby("Type de dipl√¥me")[['Nombre de sortants', 'Nombre de poursuivants']].sum()

    # Cr√©er une palette de couleurs personnalis√©e
    colors = ['#abc837', '#77264b', '#006b80']  # pomme, aubergine, canard

    # Cr√©er un graphique √† barres empil√©es (superpos√©es)
    fig, ax = plt.subplots(figsize=(10, 6))
    df_grouped[['Nombre de sortants', 'Nombre de poursuivants']].plot(
        kind='bar', stacked=True, figsize=(5, 3), ax=ax, color=colors[:2])

    # Ajouter des titres et labels
    ax.set_title('R√©partition des effectifs par Type de dipl√¥me')
    ax.set_xlabel("Type de dipl√¥me")
    ax.set_ylabel('Effectifs')
    ax.set_xticklabels(df_grouped.index, rotation=45, ha='right')

    # Afficher le graphique
    st.pyplot(fig)

def sortantspoursuivantsregion(df):
    st.markdown("### R√©partition des effectifs par R√©gion")

    # Cr√©er une instance de la classe population
    pop = population(df)
    #st.write(dir(pop)) pour checker les attributs et m√©thodes
    # Appeler la m√©thode etablissement
    df_region = pop.region()  # parenth√®ses car c'est une m√©thode
    #st.write(df_region) pour check coh√©rence avec graphique
    # Cr√©er un tableau de r√©partition par 'R√©gion' avec les colonnes 'Nombre de sortants' et 'Nombre de poursuivants'
    df_grouped = df_region.groupby("R√©gion")[['Nombre de sortants', 'Nombre de poursuivants']].sum()

    # Ajouter une colonne pour le total (Nombre de sortants + Nombre de poursuivants)
    df_grouped['Total'] = df_grouped['Nombre de sortants'] + df_grouped['Nombre de poursuivants']

    # Trier les donn√©es par ordre d√©croissant en fonction du total
    df_grouped = df_grouped.sort_values(by='Total', ascending=False)

    # Cr√©er une palette de couleurs personnalis√©e
    colors = ['#abc837', '#77264b', '#006b80']  # pomme, aubergine, canard

    # Cr√©er un graphique √† barres
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # Tracer les barres empil√©es pour chaque r√©gion
    df_grouped[['Nombre de sortants', 'Nombre de poursuivants']].plot(
        kind='bar', stacked=True, ax=ax, color=colors[:2])

    # Ajouter des titres et labels
    ax.set_title('R√©partition des effectifs par R√©gion (tri√© par ordre d√©croissant)')
    ax.set_xlabel("R√©gion")
    ax.set_ylabel('Effectifs')
    ax.set_xticklabels(df_grouped.index, rotation=45, ha='right')

    # Afficher le graphique dans Streamlit
    st.pyplot(fig)

def display_factor(df):
    st.markdown("""
    ### R√©partition des effectifs entrant sur le march√© du travail en salariat apr√®s une formation Bac + 3
    """)
    # Cr√©er une instance de la classe population
    pop = population(df)
    #st.write(dir(pop)) pour checker les attributs et m√©thodes
    # Appeler la m√©thode etablissement
    df_region_discipline = pop.region_discipline()  # appel m√©thode
    #st.write(df_region_discipline) #pour check
    with st.expander("d√©tail") :
        # Calculer le nombre de sortants globalement
        total_sortants = df_region_discipline["Nombre de sortants"].sum()
        total_sortants_tous_domaines = df_region_discipline[df_region_discipline["Domaine disciplinaire"] == "Tous domaines disciplinaires"]["Nombre de sortants"].sum()
        total_sortants_autres = df_region_discipline[df_region_discipline["Domaine disciplinaire"] != "Tous domaines disciplinaires"]["Nombre de sortants"].sum()
    
        # Calculer le nombre de poursuivants globalement
        total_poursuivants =  df_region_discipline["Nombre de poursuivants"].sum()
        total_poursuivants_tous_domaines =  df_region_discipline[ df_region_discipline["Domaine disciplinaire"] == "Tous domaines disciplinaires"]["Nombre de poursuivants"].sum()
        total_poursuivants_autres =   df_region_discipline[ df_region_discipline["Domaine disciplinaire"] != "Tous domaines disciplinaires"]["Nombre de poursuivants"].sum()

        col1, col2, col3 = st.columns([1, 0.05, 1])  # Ajout d'une colonne centrale fine pour la barre

        with col1:
            # Afficher le nombre de sortants globalement
            st.markdown(f"**Le nombre total d'√©tudiants sortant du cadre de l'enseignement est de :** **{total_sortants:,.0f}**".replace(',', ' '))
            st.markdown(f" - dont sortants sans type de discipline sp√©cifique : **{total_sortants_tous_domaines:,.0f}**".replace(',', ' '))
            st.markdown(f" - dont sortants avec discipline sp√©cifique : **{total_sortants_autres:,.0f}**".replace(',', ' '))
            st.markdown(f"**Le nombre total d'√©tudiants poursuivant leur √©tudes est de :** **{total_poursuivants:,.0f}**".replace(',', ' '))
            st.markdown(f" - dont poursuivants sans type de discipline sp√©cifique : **{total_poursuivants_tous_domaines:,.0f}**".replace(',', ' '))
            st.markdown(f" - dont poursuivants avec type de discipline sp√©cifique  : **{total_poursuivants_autres:,.0f}**".replace(',', ' '))


        # Ajouter la barre verticale dans une colonne centrale
        with col2:
            st.markdown(
                """
                 <div style='background-color: rgba(119, 38, 75, 1); width: 3px; height: 110px; margin: 0 auto;'></div>
                """,
                unsafe_allow_html=True
            )

        with col3:
            st.markdown(f"**Le nombre total de sp√©cialit√©s √©tudi√©es est de :** **{df['Libell√© du dipl√¥me'].nunique():,}**")
            st.markdown(f"**R√©parties entre :** **{df['Domaine disciplinaire'].nunique():,}** **domaines disciplinaires**")
 
        # Filtrer le DataFrame pour le premier graphique : "Tous domaines disciplinaires"
        df_tous_domaines =  df_region_discipline[( df_region_discipline["Domaine disciplinaire"] == "Tous domaines disciplinaires")]

        # Filtrer le DataFrame pour le second graphique : Toutes les autres valeurs
        df_autres_domaines = df_region_discipline[( df_region_discipline["Domaine disciplinaire"] != "Tous domaines disciplinaires")]
    
        # Calculer les limites pour l'axe x du second graphique
        min_sortants = df_autres_domaines["Nombre de sortants"].min() - 10
        max_sortants = df_autres_domaines["Nombre de sortants"].max() + 10
    
        # Cr√©ation de la figure pour contenir les deux graphiques
        fig, axes = plt.subplots(2, 1, figsize=(20, 10), sharex=False)  # Ne pas partager l'axe x
    
        # D√©finir la couleur pour le premier graphique (vert RVBA = #abc837ff)
        #custom_palette = {"National": "#abc837ff"}
    
        # Premier graphique (avec couleur personnalis√©e)palette=custom_palette
        sns.barplot(x="Nombre de sortants", y="Domaine disciplinaire", hue="R√©gion", data=df_tous_domaines, ax=axes[0] )
        axes[0].set_title("Graphique pour 'Tous domaines disciplinaires'")
        axes[0].legend_.remove()  # On enl√®ve la l√©gende du premier graphique
    
        # Second graphique (avec ajustement de l'axe x)
        sns.barplot(x="Nombre de sortants", y="Domaine disciplinaire", hue="R√©gion", data=df_autres_domaines, ax=axes[1])
        axes[1].set_title("Graphique pour les autres domaines disciplinaires")
        axes[1].legend_.remove()  # On enl√®ve la l√©gende du second graphique
    
        # Ajustement des limites de l'axe x du second graphique uniquement
        axes[1].set_xlim(min_sortants, max_sortants)
    
        # Ajout d'une l√©gende commune sous les graphiques (sur 2 lignes)
        handles, labels = axes[1].get_legend_handles_labels()
        num_labels = len(labels)
        fig.legend(handles, labels, loc='lower center', ncol=(num_labels // 2) + (num_labels % 2), bbox_to_anchor=(0.5, -0.15))
    
        # Ajustement de la disposition des graphiques
        plt.tight_layout(rect=[0, 0, 1, 0.95])
    
        # Affichage du graphique dans Streamlit
        st.pyplot(fig)

def display_majors(df) :

    st.markdown("### Pr√©sentation de la r√©partition des libell√©s de dipl√¥me par domaine disciplinaire.")
    
    # Cr√©er un selectbox pour choisir un Domaine disciplinaire
    domaines = df['Domaine disciplinaire'].unique()
    selected_domaine = st.selectbox("S√©lectionnez un domaine disciplinaire", sorted(domaines))

    # Filtrer les donn√©es en fonction du Domaine disciplinaire s√©lectionn√©
    df_filtered = df[df['Domaine disciplinaire'] == selected_domaine]

    # Calculer le nombre de valeurs uniques pour le domaine disciplinaire s√©lectionn√©
    unique_secteurs = df_filtered['Secteur disciplinaire'].nunique()
    unique_libelles_diplome = df_filtered['Libell√© du dipl√¥me'].nunique()

    # Afficher les informations au-dessus du DataFrame
    st.markdown(f"**Nombre de secteurs disciplinaires uniques pour '{selected_domaine}' :** {unique_secteurs}")
    #st.markdown(f"**Nombre de libell√©s de secteur uniques pour '{selected_domaine}' :** {unique_libelles_secteur}")
    st.markdown(f"**Nombre de libell√©s de dipl√¥me uniques pour '{selected_domaine}' :** {unique_libelles_diplome}")
    col1,col2 = st.columns([1,1])
    with col1 :
        df_filtered = df_filtered.iloc[:, :-11]
        # Afficher le DataFrame filtr√©
        st.dataframe(df_filtered, use_container_width=False, height=300)
    with col2 :
        # Ne pas afficher les 11 derni√®res colonnes
        df_filtered_bis = df[df['Domaine disciplinaire'] == selected_domaine]
        df_filtered_bis = df_filtered_bis.iloc[:,4 :8]
        # Afficher uniquement les valeurs uniques de 'Libell√© du dipl√¥me'
        df_filtered_bis_unique = df_filtered_bis.drop_duplicates(subset=['Libell√© du dipl√¥me'])
        # Afficher le DataFrame filtr√©
        st.dataframe(df_filtered_bis_unique, use_container_width=False, height=300)

def display_corr_var(df):
    st.markdown("### Corr√©lation entre les variables\n ")
    
    # S√©lectionner uniquement les colonnes num√©riques pour le calcul de la corr√©lation
    numeric_var = df.select_dtypes(include=['float64', 'int64'])

    # Calculer la matrice de corr√©lation pour les colonnes num√©riques uniquement
    corr_matrix = numeric_var.corr()

    # Cr√©er une heatmap pour visualiser la matrice de corr√©lation
    plt.figure(figsize=(10, 8))
    sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
    plt.title('Corr√©lation des variables')

    # Afficher la figure dans Streamlit
    st.pyplot(plt)

def data_heat(df):
    st.markdown("### Rapport entre sortants et poursuivants √† l'issue des formations √©tudi√©es\n ")  
    
    # Extraction des colonnes d'int√©r√™t
    x = df["Nombre de poursuivants"]
    y = df["Nombre de sortants"]

    # G√©n√©ration de couleurs et tailles al√©atoires pour chaque point
    colors = np.random.rand(len(df))
    sizes = 1000 * np.random.rand(len(df))

    # Cr√©ation du graphique de dispersion
    plt.figure(figsize=(10, 6))
    plt.scatter(x, y, c=colors, s=sizes, alpha=0.5, cmap='inferno')
    
    # Ajout de la ligne y = x
    plt.plot([x.min(), x.max()], [x.min(), x.max()], color='blue', linestyle='--', linewidth=2)

    # Affichage de l'√©chelle des couleurs
    plt.colorbar()
    
    # Ajout des labels et du titre
    plt.xlabel('Nombre de poursuivants')
    plt.ylabel('Nombre de sortants')
    plt.title('Carte de chaleur pr√©sentant le rapport entre √©tudiants poursuivant leur formation et sortants')

    # Affichage de la figure dans Streamlit
    st.pyplot(plt)

def display_spread_time(df):
    st.markdown("### Espace temporel des donn√©es : mill√©simes des dipl√¥mes et analyses des taux d'emploi √† la sortie des formations \n ")
    # Cr√©er une instance de la classe population
    pop = population(df)
    #st.write(dir(pop)) #pour checker les attributs et m√©thodes
    # Appeler la m√©thode etablissement
    df_millesime = pop.millesime()  #  parenth√®ses car c'est une m√©thode
    #st.write(df_millesime) #pour check
    # Cr√©ation de la figure avec deux sous-graphiques c√¥te √† c√¥te
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))  # 1 ligne, 2 colonnes

    # Groupement des donn√©es par Ann√©e(s) d'obtention du dipl√¥me prise(s) en compte
    df_grouped_s = df_millesime.groupby("Ann√©e(s) d'obtention du dipl√¥me prise(s) en compte")["Nombre de sortants"].sum()
    df_grouped_p = df_millesime.groupby("Ann√©e(s) d'obtention du dipl√¥me prise(s) en compte")["Nombre de poursuivants"].sum()

# Plot 1: Nombre de sortants et Nombre de poursuivants par Ann√©e(s) d'obtention du dipl√¥me (avant regroupement des mill√©simes)
    ax1.plot(df_grouped_s.index, df_grouped_s, marker='o', label="Nombre de sortants", color="#abc837")
    ax1.plot(df_grouped_p.index, df_grouped_p, marker='o', label="Nombre de poursuivants", color="#77264b")
    # Ajouter les annotations des valeurs exactes pour chaque point
    for i in range(len(df_grouped_s)):
        ax1.annotate(f'{df_grouped_s.iloc[i]}', 
                     (df_grouped_s.index[i], df_grouped_s.iloc[i]), 
                     textcoords="offset points", 
                     xytext=(0, 5), ha='center', fontsize=8)
    
    for i in range(len(df_grouped_p)):
        ax1.annotate(f'{df_grouped_p.iloc[i]}', 
                     (df_grouped_p.index[i], df_grouped_p.iloc[i]), 
                     textcoords="offset points", 
                     xytext=(0, 5), ha='center', fontsize=8)

    ax1.set_xlabel("Ann√©e(s) d'obtention du dipl√¥me prise(s) en compte")
    ax1.set_ylabel("Nombre")
    ax1.set_title("Nb sortants / poursuivants par ann√©e de diplome")
    ax1.legend(fontsize='small', loc='upper right')  # R√©duction de la taille de la l√©gende et positionnement


# Plot 2: Nombre de sortants sond√©s par p√©riode post dimpl√¥me 
    df_grouped = df.groupby("Mois apr√®s la diplomation")["Nombre de sortants"].sum().reset_index()
    ax2.bar(df_grouped["Mois apr√®s la diplomation"], df_grouped["Nombre de sortants"], color="#abc837")

    # Affichage des valeurs exactes sur l'axe des abscisses
    ax2.set_xticks(df_grouped["Mois apr√®s la diplomation"])  # Place les ticks exactement sur les mois disponibles
    ax2.set_xlabel("Mois apr√®s la diplomation")
    ax2.set_ylabel("Nombre de sortants")
    ax2.set_title("Nombre de sortants par date d'insertion en emploi")
    # Ajouter les annotations des valeurs exactes au-dessus de chaque barre

    for i in range(len(df_grouped)):
        ax2.annotate(f'{df_grouped["Nombre de sortants"].iloc[i]}', 
                     (df_grouped["Mois apr√®s la diplomation"].iloc[i], df_grouped["Nombre de sortants"].iloc[i]), 
                     textcoords="offset points", 
                     xytext=(0, 5), ha='center', fontsize=8)
    # Affichage des graphiques dans Streamlit
    with st.expander("visualiser les r√©partitions dans le temps et par date d'insertion en emploi des sortants") :
        st.pyplot(fig)

def viz_rank_university(df):
    
    # Ajouter un graphique pour le nombre d'Etablissements par Nombre de formations
    st.markdown("### R√©partition des √©tablissements par nombre de domaines disciplinaires")
    
   # Calculer le nombre de formations uniques par √©tablissement
    df_unique_formations = df.groupby('Etablissement')['Domaine disciplinaire'].nunique().reset_index()
    df_unique_formations.rename(columns={'Domaine disciplinaire': 'Nombre de formations uniques'}, inplace=True)
    col1, col2 = st.columns(2)  
    with col1:
        # CSS pour centrer verticalement le contenu de col1
        st.markdown(
            """
            <style>
            .centered-content {
                display: flex;
                flex-direction: column;
                justify-content: center;
                height: 100%;
            }
            </style>
            """,
            unsafe_allow_html=True,
        )
        with st.container():
            st.markdown('<div class="centered-content">', unsafe_allow_html=True)
        
            # Afficher un s√©lecteur pour choisir le nombre de formations au-dessus du DataFrame
            nombre_formations = st.selectbox(
                "**S√©lectionnez le nombre de formations**",
                sorted(df_unique_formations['Nombre de formations uniques'].unique())
            )

            # Filtrer les √©tablissements en fonction du nombre de formations s√©lectionn√©
            df_filtered = df_unique_formations[df_unique_formations['Nombre de formations uniques'] == nombre_formations]

            # Afficher le DataFrame filtr√©
            st.write(f"Etablissements avec exactement {nombre_formations} formation(s) unique(s):", df_filtered)

            # Calculer le total des "Nombre de sortants" et "Nombre de poursuivants" par √©tablissement
            df_grouped = df.groupby('Etablissement').agg({
                'Nombre de poursuivants': 'sum',
                'Nombre de sortants': 'sum'
            }).reset_index()

            # Ajouter la colonne "Nombre de formations uniques"
            df_grouped = pd.merge(df_grouped, df_unique_formations, on='Etablissement', how='left')

            st.markdown('</div>', unsafe_allow_html=True)

    formations_count = df_grouped['Nombre de formations uniques'].value_counts().reset_index()
    formations_count.columns = ['Nombre de formations', 'Nombre d\'√©tablissements']

    
    with col2:
        fig_formations = px.bar(
            formations_count, 
            x='Nombre de formations', 
            y="Nombre d'√©tablissements", 
            title="Nombre d'√©tablissements par nombre de formations",
            labels={
                'Nombre de formations': "Nombre de Formations", 
                "Nombre d'√©tablissements": "Nombre d'Etablissements"
            }, 
            color_discrete_sequence=['#77264b']  # Couleur aubergine 
        )
        st.plotly_chart(fig_formations)


    col1, col2 = st.columns(2)  
    with col1:
        # Cr√©er une instance de la classe population
        pop = population(df)
    
        # Appeler la m√©thode etablissement et afficher les r√©sultats
        df_etablissement = pop.etablissement()
        #st.write(df_etablissement)  # V√©rification du DataFrame

        # Calculer le nombre moyen de sortants par formation et par √©tablissement
        df_grouped = df_etablissement.groupby('Etablissement').agg({
            'Nombre de sortants': 'mean',  # Moyenne du nombre de sortants par √©tablissement,
            'Nombre de poursuivants': 'mean',  # Moyenne du nombre de poursuivants par √©tablissement
        }).reset_index()

        # V√©rification du calcul avec un scroller
        st.markdown("### Nombre moyen de sortants annuel par √©tablissement et par libell√© de formation")

        # Arrondir le 'Nombre de sortants' √† l'entier le plus proche
        df_grouped["Nombre de sortants"] = df_grouped["Nombre de sortants"].round()

        # Trier le DataFrame par 'Nombre de sortants' en ordre croissant
        df_sorted = df_grouped[['Etablissement', "Nombre de sortants"]].sort_values(by="Nombre de sortants", ascending=True)

        with st.expander( "voir les donn√©es" ):
            # Afficher le DataFrame tri√©
            st.dataframe(df_sorted)


    
    with col2 :
        # Ajouter une colonne pour le total des sortants et poursuivants
        df_grouped['Total Sortants + Poursuivants'] = df_grouped['Nombre de poursuivants'] + df_grouped['Nombre de sortants']

        # Remplacer les NaN par 0 ou une petite valeur positive pour √©viter les erreurs
        df_grouped['Nombre de sortants'].fillna(0, inplace=True)

        # Filtrer les √©tablissements o√π le total est 0 pour √©viter d'afficher des points de taille 0
        df_grouped = df_grouped[df_grouped['Total Sortants + Poursuivants'] > 0]
    
        # Trier par ordre d√©croissant du nombre moyen de sortants par formation
        df_grouped = df_grouped.sort_values(by='Nombre de sortants', ascending=False)
    
        st.markdown("### Classement des √©tablissements en fonction du Nombre moyen de sortants par formation")
        # Cr√©er une visualisation avec Plotly pour le classement des √©tablissements
        fig = px.scatter(df_grouped, 
                         x='Etablissement', 
                         y='Total Sortants + Poursuivants', 
                         size='Nombre de sortants', 
                         color='Nombre de sortants',
                         hover_name='Etablissement',
                         title="Classement des √©tablissements en fonction de la taille moyenne des promotions par formation",
                         labels={
                             'Total Sortants + Poursuivants': "Total Sortants + Poursuivants",
                             'Etablissement': "Etablissement",
                             'Nombre de sortants': "Nombre Moyen de Sortants par Formation"
                        },color_continuous_scale=["#e1f5c4", "#abc837", "#629e00"])# Palette de verts)  # Couleur verte sp√©cifi√©e

        # Mettre √† jour la disposition pour am√©liorer l'affichage
        fig.update_traces(marker=dict(line=dict(width=1, color='DarkSlateGrey')), selector=dict(mode='markers'))
        fig.update_layout(height=600, width=800, margin=dict(l=0, r=0, t=30, b=0))
    
        with st.expander( "visualiser" ):
            # Afficher la figure dans Streamlit
            st.plotly_chart(fig)

    # Cr√©er deux colonnes pour afficher les graphiques c√¥te √† c√¥te
    col1, col2 = st.columns(2)

# Premi√®re colonne: Nombre de Sortants par R√©gion
    with col1:
        st.markdown("### Nombre cumul√© de Sortants par R√©gion")
        #Cr√©er une instance de la classe population
        pop = population(df)
        # Appeler la m√©thode libelle et afficher les r√©sultats
        df_region = pop.region()
        #st.write(df_region)
        
        df_region = df_region.groupby('R√©gion')['Nombre de sortants'].sum().reset_index()
        df_region = df_region.sort_values(by='Nombre de sortants', ascending=False)  # Trier par ordre d√©croissant
        fig_region = px.bar(df_region, 
                            x='R√©gion', 
                            y='Nombre de sortants', 
                            color='Nombre de sortants',
                            #title="Nombre de Sortants par R√©gion",
                            labels={'Nombre de sortants': "Nombre de Sortants", 'R√©gion': "R√©gion"},color_continuous_scale=["#f0e1ea", "#ab5676", "#77264b"])

        fig_region.update_layout(height=600, margin=dict(l=0, r=0, t=30, b=0))
        with st.expander( "voir le graphe" ):
            st.plotly_chart(fig_region)

# Deuxi√®me colonne: Nombre de Sortants par Acad√©mie
    with col2:
        st.markdown("### Nombre cumul√© de Sortants par Acad√©mie")
        #Cr√©er une instance de la classe population
        pop = population(df)
        # Appeler la m√©thode libelle et afficher les r√©sultats
        df_academie = pop.academie()
        #st.write(df_academie)
        df_academie = df_academie.groupby('Acad√©mie')['Nombre de sortants'].sum().reset_index()
        df_academie = df_academie.sort_values(by='Nombre de sortants', ascending=False)  # Trier par ordre d√©croissant
        fig_academie = px.bar(df_academie, 
                              x='Acad√©mie', 
                              y='Nombre de sortants', 
                              color='Nombre de sortants',
                              #title="Nombre de Sortants par Acad√©mie",
                              labels={'Nombre de sortants': "Nombre de Sortants", 'Acad√©mie': "Acad√©mie"},
                              color_continuous_scale=["#f0e1ea", "#ab5676", "#77264b"]  # Couleur pourpre/violet
                            )

        fig_academie.update_layout(height=600, margin=dict(l=0, r=0, t=30, b=0))
        with st.expander( "voir le graphe" ):
            st.plotly_chart(fig_academie)

def display_map_plotly(df_cities): # Carte interactive des acad√©mies en France
    # Filtrer les coordonn√©es valides (latitude et longitude)
    valid_geo_df = df_cities[df_cities['latitude'].between(-90, 90) & df_cities['longitude'].between(-180, 180)]

    if valid_geo_df.empty:
        st.error("Aucune donn√©e avec des coordonn√©es valides n'a √©t√© trouv√©e.")
        return

    # Compter le nombre de lignes pour chaque Acad√©mie
    acad_count = valid_geo_df.groupby('Acad√©mie').size().reset_index(name='Nombre de lignes')

    # Fusionner les comptages avec les donn√©es g√©ographiques
    valid_geo_df = valid_geo_df[['Acad√©mie', 'latitude', 'longitude']].drop_duplicates()
    valid_geo_df = pd.merge(valid_geo_df, acad_count, on='Acad√©mie')

    # Cr√©er une carte interactive avec Plotly
    fig = px.scatter_mapbox(
        valid_geo_df,
        lat="latitude",
        lon="longitude",
        hover_name="Acad√©mie",
        hover_data={"Nombre de lignes": True, "latitude": False, "longitude": False},  # Ne pas afficher latitude/longitude
        size="Nombre de lignes",  # Taille des points proportionnelle au nombre de lignes
        size_max=40,
        color_discrete_sequence=["rgb(171,200,55)"],  # Couleur des points
        zoom=5,
        height=600,
    )

    # Centrer la carte sur Bruy√®res-Allichamps, France
    fig.update_layout(
        mapbox_style="open-street-map",
        mapbox_center={"lat": 46.7219, "lon": 2.4371},  # Coordonn√©es de Bruy√®res-Allichamps
        mapbox_zoom=5  # Zoom sur la France
    )

    # Ajuster les marges pour un meilleur affichage
    fig.update_layout(margin={"r":0, "t":0, "l":0, "b":0})

    # Afficher la carte dans Streamlit
    st.plotly_chart(fig)

def limites(): #texte sur limites et r√©serves dataset
    #2. Limites du dataset dans sa version actuelle
    # Cr√©ation d'un bloc d√©roulable pour les limites
    with st.expander("d√©tail..."):
        st.markdown("""
        **Limites**

        1. L'√©tude, compte tenu du nettoyage et de l'objectif d'analyse micro, ne porte pas sur l'ensemble de la population Bac+3 :
            - Les promotions dites "√† cheval" entre deux ann√©es dans le dataset, sont rattach√©es √† la promotion de l'ann√©e la plus r√©cente (ex : 2019/2020 -> 2020, etc.).
            - Afin de maximiser le nombre de mentions/dipl√¥mes par √©tablissement pour lesquels des indicateurs d'insertion sont disponibles, un cumul avec la promotion pr√©c√©dente est effectu√© dans le cas o√π l'effectif est inf√©rieur √† 20. Malgr√© cela, des cas subsistent pour lesquels l'effectif cumul√© reste inf√©rieur √† 20 et aucun taux d'emploi salari√© en France n'est affich√©.
        
        2. La qualification de l'insertion et de la stabilit√© repose sur plusieurs crit√®res :
            - Nature du contrat (CDI, CDD, etc.),
            - Secteur d'activit√©,
            - Profession et cat√©gorie socio-professionnelle,
            - R√©mun√©ration,
            - Quotit√© de travail.

        3. Le dispositif est assez r√©cent et √©volue rapidement par l'extension du nombre d'√©tablissements ou de dipl√¥mes consid√©r√©s.
            - L'√©tudier dans la dur√©e donnera plus de sens aux analyses.
            - Le dispositif Insersup pr√©voit d'inclure √©galement l'enrichissement progressif en indicateurs qualifiant les emplois occup√©s par les sortants du sup√©rieur.

        4. Pour les premi√®res versions dont celle-ci, la population d'int√©r√™t est r√©duite √† celle des √©tudiants fran√ßais de moins de 30 ans et ne reprenant pas d'√©tudes dans les 2 ann√©es suivant la diplomation.
        
        5. Les √©tudiants qui suivraient un double Bac + 3 ne sont pas isol√©s ni identifi√©s. On supposera que rapport√© au nombre total, leur quote-part n'est pas significative.
        """)

# Ex√©cution des fonctions avec gestion des √©tats
if __name__ == "__main__":
    load_view()