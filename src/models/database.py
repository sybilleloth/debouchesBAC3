import sqlite3

class Database :
#    def __init__(self) -> None:
#        self.__db = sqlite3.connect("project.db")

    def __init__(self):
        """
        Initialise la connexion √† la base de donn√©es SQLite.
        """
        try:
            #self.connection = sqlite3.connect("project.db")  # appel de la base de donn√©es
            self.connection = sqlite3.connect("project.db", check_same_thread=False)  # üî• Ajout de check_same_thread=False
            self.connection.row_factory = sqlite3.Row  # Facultatif : pour r√©cup√©rer les r√©sultats sous forme de dictionnaire
            print("‚úÖ Connexion SQLite √©tablie avec support multi-thread")
        except sqlite3.Error as e:
            print(f"Erreur lors de la connexion √† la base de donn√©es : {e}")
            raise

    def setup(self):
        self.execute("CREATE TABLE IF NOT EXISTS users(uid INTEGER PRIMARY KEY UNIQUE ,email VARCHAR UNIQUE, password VARCHAR)")
        self.execute("CREATE TABLE IF NOT EXISTS logs(id INTEGER PRIMARY KEY UNIQUE ,uid INTEGER ,action VARCHAR ,value VARCHAR)")
        try:
            self.execute(f"INSERT INTO users (email,password) VALUES ('admin', 'admin')")
        except:
            print("Admin already exists.")
        self.commit()

    def drop(self):
        self.execute("DROP TABLE IF EXISTS users")
        self.execute("DROP TABLE IF EXISTS logs")
        self.commit()

    #def execute(self, query:str):
    #    return self.__db.execute(query)
    
    def execute(self, query, params=None):
        """
        Ex√©cute une requ√™te SQL.
        :param query: Requ√™te SQL avec placeholders (?)
        :param params: Tuple ou liste contenant les param√®tres.
        :return: Curseur contenant les r√©sultats.
        """
        try:
            cursor = self.connection.cursor()
            if params:
                cursor.execute(query, params)
            else:
                cursor.execute(query)
            return cursor
        except sqlite3.Error as e:
            print(f"Erreur lors de l'ex√©cution de la requ√™te : {e}")
            raise
    
    def fetch_one(self, query, params=None):
        """
        Ex√©cute une requ√™te SQL et retourne une seule ligne.
        :param query: Requ√™te SQL avec placeholders (?).
        :param params: Tuple ou liste contenant les param√®tres.
        :return: Une seule ligne sous forme de tuple, ou (0,) si aucun r√©sultat.
        """
        try:
            cursor = self.execute(query, params)
            result = cursor.fetchone()
            print(f"üîé fetch_one R√©sultat: {result}")  # Debugging
            return result 
        
        except sqlite3.Error as e:
            print(f"‚ùå Erreur dans fetch_one : {e}")
            return None

    def commit(self):
        """
        Valide les modifications dans la base de donn√©es.
        """
        try:
            self.connection.commit()
        except sqlite3.Error as e:
            print(f"Erreur lors du commit : {e}")
            raise

    def close(self):
        """
        Ferme la connexion √† la base de donn√©es.
        """
        if self.connection:
            self.connection.close()
  